package io.github.mfvanek.computer.science;

public class Tinkoff {

    public static void main(String[] args) {

        /*
         * Задание
         *
         * Ограничение времени 1 секунда
         * Ограничение памяти 256 МБ
         *
         * Максим пришёл в Тинькофф, чтобы взять кредит на покупку новогодних подарков. Ему предодобрен
         * кредит в размере m бурлей, значит он может получить любое целое количество бурлей от 0 до m включительно.
         *
         * У Максима есть заранее подготовленный список из n подарков. Он планирует идти по порядку
         * вдоль списка и каждый раз, когда он видит подарок, на который у него хватает денег, он обязательно
         * моментально его покупает.
         *
         * Помогите ему посчитать, какое максимальное количество денег у него может остаться после закупки
         * подарков, если он возьмёт кредит оптимального размера (то есть такого, чтобы у него осталось как
         * можно больше денег после покупки подарков по алгоритму).
         *
         * Формат входных данных
         *
         * Первая строка содержит два целых числа n и m (1 < n < 10^5,1 < m < 10^9) — длина списка
         * подарков и размер предодобренного кредита.
         *
         * Вторая строка содержит n целых чисел — цены подарков а; (1 < а < 10^9)
         *
         * Формат выходных данных
         *
         * Выведите одно число — максимальное количество бурлей, которое могло остаться у Максима после
         * закупки подарков.
         *
         * Замечание
         *
         * Впервом примере Максим может взять в кредит 3 бурля, и тогда он купит только последний
         * подарок. Во втором примере Максим может взять кредит на все 10 бурлей и купить все подарки.
         *
         * Примеры:
         * 3 10
         * 5 4 1
         * Вывод 2
         *
         * 3 10
         * 1 2 3
         * Вывод 4
         */
        int m = 117;
        int[] a = {2, 55, 66, 1, 3};
        solve(m, a);

        m = 10;
        a = new int[]{5, 4, 1};
        solve(m, a);

        a = new int[]{1, 2, 3};
        solve(m, a);
    }

    private static void solve(final int m, final int[] a) {
        int maxProfit = -1;
        for (int amount = m; amount > 0; --amount) {
            int remain = amount;
            for (int i = 0; i < a.length; ++i) {
                if (a[i] <= remain) {
                    remain -= a[i];
                }
            }
            maxProfit = Math.max(maxProfit, remain);
        }
        System.out.println(maxProfit);
    }
}
